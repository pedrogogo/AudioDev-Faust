

/*
3 oscillators paraphonic synthesizer

Notes:
- Each oscillator has 3 different waverforms to choose from: osc, triangle, square and sawtooth.
- Oscillator 2 and 3 have have a detune implemented which can be changed by +3Hz,-3Hz.
- Oscillator 3 has got a switch which allows changing the oscillator base frequency by an octave and a fifth up to 4 octaves easily expanded if needed.

*/

//filter taken from an example from https://faustdoc.grame.fr/examples/filtering/#korg35lpf
declare author "Eric Tarr";  

import ("stdfaust.lib");

//////////OSCILLATORS/////////////
osc1 = hgroup("[0]Osc1-Sub",os.osc(freq), os.polyblep_triangle(freq/2), os.polyblep_square(freq/2),os.polyblep_saw(freq/2) : ba.selectn(4,wave))
with{
    wave =nentry("[0]oscType",2,0,3,1);
    freq =hslider("[0]freq",440,50,2000,0.01);
};

detuneOsc2 = hslider("detuneOsc2", 0,-3,3,0.01);
osc2 = hgroup("[0]osc2",os.osc(freq+detuneOsc2), os.polyblep_triangle(freq+detuneOsc2), os.polyblep_square(freq+detuneOsc2),os.polyblep_saw(freq+detuneOsc2) : ba.selectn(4,wave))
with{
    wave =nentry("oscType",3,0,3,1);
    freq =hslider("freq",440,50,2000,0.01);
};

detuneOsc3 = hslider("detuneOsc3", 0,-3,3,0.01);
octaveFifth =nentry("octaveFifth",1,1,4,0.5);
osc3 = hgroup("[0]osc3",os.osc(freq*octaveFifth+detuneOsc3), os.polyblep_triangle(freq*octaveFifth+detuneOsc3), os.polyblep_square(freq*octaveFifth+detuneOsc3),os.polyblep_saw(freq*octaveFifth+detuneOsc3) : ba.selectn(4,wave))
with{
    wave =nentry("oscType",3,0,3,1);
    freq =hslider("freq",440,50,2000,0.01);
};


/////////////ENVELOPE/////////////
envelope = hgroup("[1]Envelope",en.adsr(attack,decay,sustain,release,gate)*gain*0.2)
with{
    attack  = hslider("[0]Attack[style:knob]", 50,1,1000,1)*0.001;
    decay   = hslider("[1]Decay[style:knob]", 50,1,1000,1)*0.001;
    sustain = hslider("[2]Sustain[style:knob]", 1,0.01,1,0.01);
    release = hslider("[3]Release[style:knob]",50,1,5000,1)*0.001;
    gain    = hslider("[4]gain[style:knob]",0.5,0,1,0.01);
    gate    = button("[5]gate");

};




//////////////FILTER//////////////
Q = hslider("Q",1,0.5,10,0.01);
normFreq = hslider("Cutoff",0.8,0,1,0.001):si.smoo;


/////////////OUTPUT/////////////
process = vgroup("Synth",(osc3*envelope  + osc2*envelope + osc1*envelope) : ve.korg35LPF(normFreq,Q) <:_,_);

